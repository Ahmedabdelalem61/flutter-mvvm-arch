name: flutter_mvvm_app
description: Clean Architecture Design Pattern MVVM - Model - View - View Model Pattern ViewModel Inputs and Outputs Base ViewModel and Base UseCase Application Layer - Dependency Injection, Routes Manager and Application class Application Layer - Extensions and Shared Functions Data Layer - Data Sources (Remote Data Source/ Local Data Source) Data Layer - API Service Client (Same as Retorfit in Android) Data Layer - Calling APIs (Remote Data Source) Data Layer - Adding Logger Interceptor Data Layer - Caching APIs responses (Local Data Source) Data Layer - Json Serialization and Annotations Data Layer - Repository Implementation Data Layer - Mapper (Converting responses into Models) Data Layer - Mapper (Using toDomain Concept) Data Layer - Applying Null Safety Data Layer - Creating Mock APIs (Stub APIs) Domain Layer - Models Domain Layer - Repository Interfaces Domain Layer - UseCases Domain Layer - Either Concepts (Left - Failure) / (Right - Success) Domain Layer - Data Classes Presentation Layer - UI (Splash - Onboarding - Login - Register - Forgot Password - Main - Details - Settings - Notification - Search)) Presentation Layer - State Renderer (Full Screen States - Popup States) Presentation Layer - State Management (Stream Controller - RX Dart - Stream Builder) Presentation Layer - Localisations (English - Arabic), (RTL - LTR) Presentation Layer - Assets Manager (Android and Ios Icons and Images sizes) Presentation Layer - (Fonts - Styles - Themes - Strings - Values - Colors) Managers Presentation Layer - Using Json Animations Presentation Layer - Using SVG images Using 18 Flutter Packages Getting Device Info (Android - Ios) Using Abstract classes

# The following line prevents the package from being accidentally published to
# pub.dev using `flutter pub publish`. This is preferred for private packages.
publish_to: 'none' # Remove this line if you wish to publish to pub.dev

# The following defines the version and build number for your application.
# A version number is three numbers separated by dots, like 1.2.43
# followed by an optional build number separated by a +.
# Both the version and the builder number may be overridden in flutter
# build by specifying --build-name and --build-number, respectively.
# In Android, build-name is used as versionName while build-number used as versionCode.
# Read more about Android versioning at https://developer.android.com/studio/publish/versioning
# In iOS, build-name is used as CFBundleShortVersionString while build-number used as CFBundleVersion.
# Read more about iOS versioning at
# https://developer.apple.com/library/archive/documentation/General/Reference/InfoPlistKeyReference/Articles/CoreFoundationKeys.html
version: 1.0.0+1

environment:
  sdk: ">=2.16.1 <3.0.0"

# Dependencies specify other packages that your package needs in order to work.
# To automatically upgrade your package dependencies to the latest versions
# consider running `flutter pub upgrade --major-versions`. Alternatively,
# dependencies can be manually updated by changing the version numbers below to
# the latest version available on pub.dev. To see which dependencies have newer
# versions available, run `flutter pub outdated`.
dependencies:
  flutter:
    sdk: flutter


  # The following adds the Cupertino Icons font to your application.
  # Use with the CupertinoIcons class for iOS style icons.
  cupertino_icons: ^1.0.2

dev_dependencies:
  flutter_test:
    sdk: flutter

  # The "flutter_lints" package below contains a set of recommended lints to
  # encourage good coding practices. The lint set provided by the package is
  # activated in the `analysis_options.yaml` file located at the root of your
  # package. See that file for information about deactivating specific lint
  # rules and activating additional ones.
  flutter_lints: ^1.0.0

# For information on the generic Dart part of this file, see the
# following page: https://dart.dev/tools/pub/pubspec

# The following section is specific to Flutter.
flutter:

  # The following line ensures that the Material Icons font is
  # included with your application, so that you can use the icons in
  # the material Icons class.
  uses-material-design: true

  # To add assets to your application, add an assets section, like this:
  # assets:
  #   - images/a_dot_burr.jpeg
  #   - images/a_dot_ham.jpeg

  # An image asset can refer to one or more resolution-specific "variants", see
  # https://flutter.dev/assets-and-images/#resolution-aware.

  # For details regarding adding assets from package dependencies, see
  # https://flutter.dev/assets-and-images/#from-packages

  # To add custom fonts to your application, add a fonts section here,
  # in this "flutter" section. Each entry in this list should have a
  # "family" key with the font family name, and a "fonts" key with a
  # list giving the asset and other descriptors for the font. For
  # example:
  fonts:
    - family: Montserrat
      fonts:
        - asset: assets/fonts/Montserrat-Bold.ttf
          weight: 700
        - asset: assets/fonts/Montserrat-SemiBold.ttf
          weight: 600
        - asset: assets/fonts/Montserrat-Medium.ttf
          weight: 500
        - asset: assets/fonts/Montserrat-Regular.ttf
          weight: 400
        - asset: assets/fonts/Montserrat-Light.ttf
          weight: 300

